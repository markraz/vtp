//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: enviro.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#ifdef __GNUG__
    #pragma implementation "enviro_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "enviro_wdr.h"

#include <wx/intl.h>

// Euro sign hack of the year
#if wxUSE_UNICODE
    #define __WDR_EURO__ wxT("\u20ac")
#else
    #if defined(__WXMAC__)
        #define __WDR_EURO__ wxT("\xdb")
    #elif defined(__WXMSW__)
        #define __WDR_EURO__ wxT("\x80")
    #else
        #define __WDR_EURO__ wxT("\xa4")
    #endif
#endif

// Implement window functions

wxSizer *StartupDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER, 0 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, _("Launch with:") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxRadioButton *item4 = new wxRadioButton( parent, ID_EARTHVIEW, _("Earth View"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP, 10 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    item5->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_IMAGETEXT, _("Image:  "), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 0 );

    wxString *strs7 = (wxString*) NULL;
    wxComboBox *item7 = new wxComboBox( parent, ID_IMAGE, wxT(""), wxDefaultPosition, wxSize(125,100), 0, strs7, wxCB_DROPDOWN );
    item5->Add( item7, 1, wxALIGN_CENTER|wxALL, 0 );

    item2->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxRadioButton *item8 = new wxRadioButton( parent, ID_TERRAIN, _("Terrain"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    item9->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs10 = (wxString*) NULL;
    wxChoice *item10 = new wxChoice( parent, ID_TNAME, wxDefaultPosition, wxSize(190,-1), 0, strs10, 0 );
    item9->Add( item10, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, ID_EDITPROP, _("Edit Properties"), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 10 );

    wxButton *item12 = new wxButton( parent, ID_TERRMAN, _("Terrain Manager..."), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item12, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxStaticBox *item14 = new wxStaticBox( parent, -1, _("Global options") );
    wxStaticBoxSizer *item13 = new wxStaticBoxSizer( item14, wxVERTICAL );

    wxBoxSizer *item15 = new wxBoxSizer( wxVERTICAL );

    wxGridSizer *item16 = new wxGridSizer( 2, 0, 0 );

    wxCheckBox *item17 = new wxCheckBox( parent, ID_FULLSCREEN, _("Full Screen"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item18 = new wxCheckBox( parent, ID_TEXTURE_COMPRESSION, _("Texture Compression"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item15->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, _("Size Exaggeration for Plants and Fences: "), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_PLANTSIZE, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item19, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("Content file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs24 = (wxString*) NULL;
    wxChoice *item24 = new wxChoice( parent, ID_CHOICE_CONTENT, wxDefaultPosition, wxSize(100,-1), 0, strs24, 0 );
    item22->Add( item24, 1, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item13->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 10 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item26 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item26->SetDefault();
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item27 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, ID_OPENGL, _("OpenGL Info..."), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item28, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *SceneGraphFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTreeCtrl *item1 = new wxTreeCtrl( parent, ID_SCENETREE, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxSUNKEN_BORDER );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item3 = new wxCheckBox( parent, ID_ENABLED, _("Enabled"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_ZOOMTO, _("Zoom To"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_REFRESH, _("Refresh"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item2, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TParamsFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Name:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_TNAME, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 1, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxNotebook *item5 = new wxNotebook( parent, ID_NOTEBOOK, wxDefaultPosition, wxSize(200,160), 0 );
    wxNotebookSizer *item4 = new wxNotebookSizer( item5 );

    wxPanel *item6 = new wxPanel( item5, -1 );
    TParams1Func( item6, FALSE );
    item5->AddPage( item6, _("Elevation") );

    wxPanel *item7 = new wxPanel( item5, -1 );
    TParams2Func( item7, FALSE );
    item5->AddPage( item7, _("Texture") );

    wxPanel *item8 = new wxPanel( item5, -1 );
    TParams3Func( item8, FALSE );
    item5->AddPage( item8, _("Culture") );

    wxPanel *item9 = new wxPanel( item5, -1 );
    TParams5Func( item9, FALSE );
    item5->AddPage( item9, _("Sky && Ocean") );

    wxPanel *item10 = new wxPanel( item5, -1 );
    TParams6Func( item10, FALSE );
    item5->AddPage( item10, _("Features && Labels") );

    wxPanel *item11 = new wxPanel( item5, -1 );
    TParams4Func( item11, FALSE );
    item5->AddPage( item11, _("Miscellaneous") );

    item0->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item13 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *PlantDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _(" Species:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_SPECIES, wxDefaultPosition, wxSize(160,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("    Height:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_PLANT_HEIGHT_EDIT, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item8 = new wxSlider( parent, ID_HEIGHT_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(120,-1), wxSL_HORIZONTAL );
    item4->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item10 = new wxStaticBox( parent, -1, _("Planting Options") );
    wxStaticBoxSizer *item9 = new wxStaticBoxSizer( item10, wxVERTICAL );

    wxBoxSizer *item11 = new wxBoxSizer( wxVERTICAL );

    wxRadioButton *item12 = new wxRadioButton( parent, ID_PLANT_INDIVIDUAL, _("Individual instances"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item13 = new wxRadioButton( parent, ID_PLANT_LINEAR, _("Straight line"), wxDefaultPosition, wxDefaultSize, 0 );
    item13->Enable( false );
    item11->Add( item13, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxRadioButton *item14 = new wxRadioButton( parent, ID_PLANT_CONTINUOUS, _("Continuously"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Enable( false );
    item11->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item9->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, _("Height variance:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, ID_PLANT_VARIANCE_EDIT, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item18 = new wxStaticText( parent, ID_TEXT, _("%"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item19 = new wxSlider( parent, ID_PLANT_VARIANCE_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item15->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item9->Add( item15, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("Minimum spacing:"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_PLANT_SPACING_EDIT, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item9->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *LocationDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxString *strs3 = (wxString*) NULL;
    wxListBox *item3 = new wxListBox( parent, ID_LOCLIST, wxDefaultPosition, wxDefaultSize, 0, strs3, 0 );
    item2->Add( item3, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item5 = new wxButton( parent, ID_SAVE, _("Save"), wxDefaultPosition, wxSize(60,-1), 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxButton *item6 = new wxButton( parent, ID_LOAD, _("Load"), wxDefaultPosition, wxSize(60,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL, 0 );

    wxBoxSizer *item7 = new wxBoxSizer( wxVERTICAL );

    wxButton *item8 = new wxButton( parent, ID_RECALL, _("Recall ->"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, ID_STORE, _("<- Store"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, ID_STOREAS, _("Store As.."), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, ID_REMOVE, _("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item7, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxTOP, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticLine *item12 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item14 = new wxBoxSizer( wxVERTICAL );

    wxString *strs15 = (wxString*) NULL;
    wxListBox *item15 = new wxListBox( parent, ID_ANIMS, wxDefaultPosition, wxDefaultSize, 0, strs15, wxLB_SINGLE );
    item14->Add( item15, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item17 = new wxButton( parent, ID_NEW_ANIM, _("New"), wxDefaultPosition, wxSize(60,-1), 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxButton *item18 = new wxButton( parent, ID_SAVE_ANIM, _("Save"), wxDefaultPosition, wxSize(60,-1), 0 );
    item18->Enable( false );
    item16->Add( item18, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxButton *item19 = new wxButton( parent, ID_LOAD_ANIM, _("Load"), wxDefaultPosition, wxSize(60,-1), 0 );
    item16->Add( item19, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item16->Add( 14, 14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBitmapButton *item20 = new wxBitmapButton( parent, ID_RESET, MyBitmapsFunc( 1 ), wxDefaultPosition, wxDefaultSize );
    item16->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBitmapButton *item21 = new wxBitmapButton( parent, ID_STOP, MyBitmapsFunc( 2 ), wxDefaultPosition, wxDefaultSize );
    item16->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBitmapButton *item22 = new wxBitmapButton( parent, ID_RECORD1, MyBitmapsFunc( 4 ), wxDefaultPosition, wxDefaultSize );
    item16->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBitmapButton *item23 = new wxBitmapButton( parent, ID_PLAY, MyBitmapsFunc( 3 ), wxDefaultPosition, wxDefaultSize );
    item16->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    item14->Add( item16, 0, wxALIGN_CENTER, 5 );

    item13->Add( item14, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL, 5 );

    item0->Add( item13, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item24 = new wxBoxSizer( wxHORIZONTAL );

    wxSlider *item25 = new wxSlider( parent, ID_ANIM_POS, 0, 0, 1000, wxDefaultPosition, wxSize(-1,24), wxSL_HORIZONTAL );
    item24->Add( item25, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item26 = new wxCheckBox( parent, ID_ACTIVE, _("Active"), wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item24, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticBox *item28 = new wxStaticBox( parent, -1, _("Playback") );
    wxStaticBoxSizer *item27 = new wxStaticBoxSizer( item28, wxVERTICAL );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, _("Speed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item31 = new wxSlider( parent, ID_SPEEDSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(-1,24), wxSL_HORIZONTAL );
    item29->Add( item31, 1, wxALIGN_CENTER, 5 );

    wxTextCtrl *item32 = new wxTextCtrl( parent, ID_SPEED, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item29->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item33 = new wxStaticText( parent, ID_TEXT, _("m/s"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item29, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item35 = new wxCheckBox( parent, ID_LOOP, _("Loop"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item36 = new wxCheckBox( parent, ID_CONTINUOUS, _("Continuous"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item36, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item37 = new wxCheckBox( parent, ID_SMOOTH, _("Smooth"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item37, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item38 = new wxCheckBox( parent, ID_POS_ONLY, _("Position Only"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    item27->Add( item34, 0, wxALIGN_CENTER_HORIZONTAL, 5 );

    item0->Add( item27, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item40 = new wxStaticBox( parent, -1, _("Recording") );
    wxStaticBoxSizer *item39 = new wxStaticBoxSizer( item40, wxVERTICAL );

    wxRadioButton *item41 = new wxRadioButton( parent, ID_RECORD_LINEAR, _("Use linear distance"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item39->Add( item41, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item42 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item43 = new wxRadioButton( parent, ID_RECORD_INTERVAL, _("Time interval"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item43, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item44 = new wxTextCtrl( parent, ID_RECORD_SPACING, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item42->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item45 = new wxStaticText( parent, ID_TEXT, _("seconds"), wxDefaultPosition, wxDefaultSize, 0 );
    item42->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    item39->Add( item42, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item39, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *CameraDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Position:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_CAMX, wxT(""), wxDefaultPosition, wxSize(120,-1), wxTE_PROCESS_ENTER );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_CAMY, wxT(""), wxDefaultPosition, wxSize(120,-1), wxTE_PROCESS_ENTER );
    item1->Add( item4, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    item0->Add( item1, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP, 5 );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Elevation:"), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_CAMZ, wxT(""), wxDefaultPosition, wxSize(100,-1), wxTE_PROCESS_ENTER );
    item5->Add( item7, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item5, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _("Horizontal FOV (degrees)"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_FOV, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxSlider *item11 = new wxSlider( parent, ID_FOVSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("Near Clipping Plane (meters):"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_NEAR, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 0 );

    wxSlider *item15 = new wxSlider( parent, ID_NEARSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item12->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item12, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Far Clipping Plane (meters):"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_FAR, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item16->Add( item18, 0, wxALIGN_CENTER|wxALL, 0 );

    wxSlider *item19 = new wxSlider( parent, ID_FARSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item16->Add( item19, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item16, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticLine *item20 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item20, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, _("Navigation Speed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item21->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item23 = new wxTextCtrl( parent, ID_SPEED, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item21->Add( item23, 0, wxALIGN_CENTER|wxALL, 0 );

    wxSlider *item24 = new wxSlider( parent, ID_SPEEDSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item21->Add( item24, 0, wxALIGN_CENTER, 0 );

    item0->Add( item21, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, _("Units"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs27 = (wxString*) NULL;
    wxChoice *item27 = new wxChoice( parent, ID_SPEED_UNITS, wxDefaultPosition, wxSize(100,-1), 0, strs27, 0 );
    item25->Add( item27, 0, wxALIGN_CENTER|wxALL, 5 );

    item25->Add( 55, 20, 0, wxALIGN_CENTER, 0 );

    item0->Add( item25, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item29 = new wxCheckBox( parent, ID_ACCEL, _("Accelerate by height above ground"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item28, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );

    wxStaticLine *item30 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item30, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item31 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item32 = new wxStaticText( parent, ID_TEXT, _("LOD distance for Vegetation"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item32, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item33 = new wxTextCtrl( parent, ID_LOD_VEG, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item31->Add( item33, 0, wxALIGN_CENTER, 5 );

    wxSlider *item34 = new wxSlider( parent, ID_SLIDER_VEG, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item31->Add( item34, 0, wxALIGN_CENTER, 0 );

    item0->Add( item31, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, _("LOD distance for Structures"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item37 = new wxTextCtrl( parent, ID_LOD_STRUCT, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item35->Add( item37, 0, wxALIGN_CENTER, 5 );

    wxSlider *item38 = new wxSlider( parent, ID_SLIDER_STRUCT, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item35->Add( item38, 0, wxALIGN_CENTER, 0 );

    item0->Add( item35, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP, 5 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, _("LOD distance for Roads"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, ID_LOD_ROAD, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item39->Add( item41, 0, wxALIGN_CENTER, 5 );

    wxSlider *item42 = new wxSlider( parent, ID_SLIDER_ROAD, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), wxSL_HORIZONTAL );
    item39->Add( item42, 0, wxALIGN_CENTER, 0 );

    item0->Add( item39, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TextDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item1 = new wxTextCtrl( parent, ID_TEXT, wxT(""), wxDefaultPosition, wxSize(450,250), wxTE_MULTILINE|wxTE_READONLY );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item2 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item2, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *UtilDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Structure Type:"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_STRUCTTYPE, wxDefaultPosition, wxSize(250,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TParams1Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Elevation Grid") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item4 = new wxRadioButton( parent, ID_USE_GRID, _("Grid Filename: "), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item3->Add( item4, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxComboBox *item5 = new wxComboBox( parent, ID_FILENAME, wxT(""), wxDefaultPosition, wxSize(180,-1), 0, strs5, wxCB_DROPDOWN|wxCB_SORT );
    item3->Add( item5, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Terrain LOD Method:"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs8 = (wxString*) NULL;
    wxChoice *item8 = new wxChoice( parent, ID_LODMETHOD, wxDefaultPosition, wxSize(120,-1), 0, strs8, 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item6, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, _("Triangle Count: "), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_TRICOUNT, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item9->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item12 = new wxStaticText( parent, ID_TEXT, _("Pixel Error Bound: "), wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item12, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item13 = new wxTextCtrl( parent, ID_PIXELERROR, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item9->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item9, 0, wxALIGN_CENTER, 5 );

    wxCheckBox *item14 = new wxCheckBox( parent, ID_TRISTRIPS, _("Use strips/fans"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 10 );

    wxStaticBox *item16 = new wxStaticBox( parent, -1, _("Elevation TIN") );
    wxStaticBoxSizer *item15 = new wxStaticBoxSizer( item16, wxVERTICAL );

    wxBoxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item18 = new wxRadioButton( parent, ID_USE_TIN, _("TIN Filename:"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT, 5 );

    wxString *strs19 = (wxString*) NULL;
    wxComboBox *item19 = new wxComboBox( parent, ID_FILENAME_TIN, wxT(""), wxDefaultPosition, wxSize(180,-1), 0, strs19, wxCB_DROPDOWN|wxCB_SORT );
    item17->Add( item19, 1, wxALIGN_CENTER|wxALL, 5 );

    item15->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    item0->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 10 );

    wxBoxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("Vertical Exaggeration:"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_VERTEXAG, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item20->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("x"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item23, 0, wxALIGN_CENTER|wxALL, 0 );

    item0->Add( item20, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TParams2Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Texture") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_NONE, _("No texture"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item5 = new wxRadioButton( parent, ID_SINGLE, _("Single texture "), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxString *strs6 = (wxString*) NULL;
    wxComboBox *item6 = new wxComboBox( parent, ID_TFILESINGLE, wxT(""), wxDefaultPosition, wxDefaultSize, 0, strs6, wxCB_DROPDOWN|wxCB_SORT );
    item4->Add( item6, 1, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxRadioButton *item7 = new wxRadioButton( parent, ID_DERIVED, _("Derive texture from elevation"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    item8->Add( 20, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs9 = (wxString*) NULL;
    wxChoice *item9 = new wxChoice( parent, ID_CHOICE_COLORS, wxDefaultPosition, wxSize(180,-1), 0, strs9, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, ID_EDIT_COLORS, _("Edit Colors..."), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item8, 0, wxALIGN_CENTER, 5 );

    wxRadioButton *item11 = new wxRadioButton( parent, ID_TILED, _("4x4 Tiled texture"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxFlexGridSizer *item12 = new wxFlexGridSizer( 2, 0, 0 );
    item12->AddGrowableCol( 1 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("Tile size: "), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item14 = new wxTextCtrl( parent, ID_TILESIZE, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item12->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Filename base: "), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item15, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_TFILEBASE, wxT(""), wxDefaultPosition, wxSize(220,-1), 0 );
    item12->Add( item16, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("File Format:"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item17, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );

    wxCheckBox *item18 = new wxCheckBox( parent, ID_JPEG, _("JPEG"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item19 = new wxStaticText( parent, ID_TEXT, _("Filename: "), wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item19, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_TFILENAME, wxT(""), wxDefaultPosition, wxSize(220,-1), 0 );
    item12->Add( item20, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxBoxSizer *item21 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item22 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item23 = new wxCheckBox( parent, ID_MIPMAP, _("Mipmapping"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item24 = new wxCheckBox( parent, ID_16BIT, _("Request 16-bit"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item21->Add( item22, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxBoxSizer *item25 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item26 = new wxCheckBox( parent, ID_PRELIGHT, _("Precompute lighting"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item27 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item28 = new wxStaticText( parent, ID_TEXT, _("Lighting factor: "), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item28, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item29 = new wxTextCtrl( parent, ID_LIGHT_FACTOR, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxALL, 0 );

    item25->Add( item27, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item30 = new wxCheckBox( parent, ID_CAST_SHADOWS, _("Cast shadows"), wxDefaultPosition, wxDefaultSize, 0 );
    item25->Add( item30, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item21->Add( item25, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item1->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 1, wxALL, 10 );

    wxStaticBox *item32 = new wxStaticBox( parent, -1, _("Detail Texture") );
    wxStaticBoxSizer *item31 = new wxStaticBoxSizer( item32, wxVERTICAL );

    wxCheckBox *item33 = new wxCheckBox( parent, ID_DETAILTEXTURE, _("Show detail texture"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item33, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs34 = (wxString*) NULL;
    wxComboBox *item34 = new wxComboBox( parent, ID_DT_NAME, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs34, wxCB_DROPDOWN );
    item31->Add( item34, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item35 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, _("Scale"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item37 = new wxTextCtrl( parent, ID_DT_SCALE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item35->Add( item37, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    item31->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item38 = new wxStaticText( parent, ID_TEXT, _("(meter size of detail texture)"), wxDefaultPosition, wxDefaultSize, 0 );
    item31->Add( item38, 0, wxALIGN_CENTER|wxALL, 5 );

    wxBoxSizer *item39 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item40 = new wxStaticText( parent, ID_TEXT, _("Distance"), wxDefaultPosition, wxDefaultSize, 0 );
    item39->Add( item40, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item41 = new wxTextCtrl( parent, ID_DT_DISTANCE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item39->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    item31->Add( item39, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item31, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TParams3Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item2 = new wxCheckBox( parent, ID_PLANTS, _("Plants"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticBox *item4 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item3 = new wxStaticBoxSizer( item4, wxVERTICAL );

    wxBoxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Source file: "), wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs7 = (wxString*) NULL;
    wxComboBox *item7 = new wxComboBox( parent, ID_TREEFILE, wxT(""), wxDefaultPosition, wxDefaultSize, 0, strs7, wxCB_DROPDOWN|wxCB_SORT );
    item5->Add( item7, 1, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _(" Visibility distance: "), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_VEGDISTANCE, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("m"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxCheckBox *item12 = new wxCheckBox( parent, ID_ROADS, _("Roads"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxStaticBox *item14 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item13 = new wxStaticBoxSizer( item14, wxVERTICAL );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, _("Source file: "), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs17 = (wxString*) NULL;
    wxComboBox *item17 = new wxComboBox( parent, ID_ROADFILE, wxT(""), wxDefaultPosition, wxDefaultSize, 0, strs17, wxCB_DROPDOWN|wxCB_SORT );
    item15->Add( item17, 1, wxALIGN_CENTER|wxALL, 5 );

    item13->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item18 = new wxBoxSizer( wxHORIZONTAL );

    wxBoxSizer *item19 = new wxBoxSizer( wxVERTICAL );

    wxFlexGridSizer *item20 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item21 = new wxStaticText( parent, ID_TEXT, _("Ground offset: "), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item21, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item22 = new wxTextCtrl( parent, ID_ROADHEIGHT, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item20->Add( item22, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, _("Visibility distance:"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item24, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item25 = new wxTextCtrl( parent, ID_ROADDISTANCE, wxT(""), wxDefaultPosition, wxSize(40,-1), 0 );
    item20->Add( item25, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item26 = new wxStaticText( parent, ID_TEXT, _("km"), wxDefaultPosition, wxDefaultSize, 0 );
    item20->Add( item26, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxCheckBox *item27 = new wxCheckBox( parent, ID_TEXROADS, _("Texture-map roads"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item28 = new wxCheckBox( parent, ID_ROADCULTURE, _("Road culture (stoplights, etc.)"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item28, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item18->Add( item19, 0, wxALIGN_CENTER|wxALL, 0 );

    item13->Add( item18, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item29 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item30 = new wxStaticText( parent, ID_TEXT, _("Include:"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item30, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxCheckBox *item31 = new wxCheckBox( parent, ID_HIGHWAYS, _("Highways"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item32 = new wxCheckBox( parent, ID_PAVED, _("Paved"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item33 = new wxCheckBox( parent, ID_DIRT, _("Dirt"), wxDefaultPosition, wxDefaultSize, 0 );
    item29->Add( item33, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item13->Add( item29, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item1, 1, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxTOP, 5 );

    wxBoxSizer *item34 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item35 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item36 = new wxStaticText( parent, ID_TEXT, _("Terrain-specific content:"), wxDefaultPosition, wxDefaultSize, 0 );
    item35->Add( item36, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs37 = (wxString*) NULL;
    wxComboBox *item37 = new wxComboBox( parent, ID_CONTENT_FILE, wxT(""), wxDefaultPosition, wxSize(100,-1), 0, strs37, wxCB_DROPDOWN );
    item35->Add( item37, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item34->Add( item35, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item39 = new wxStaticBox( parent, -1, _("Structure Files") );
    wxStaticBoxSizer *item38 = new wxStaticBoxSizer( item39, wxVERTICAL );

    wxString *strs40 = (wxString*) NULL;
    wxListBox *item40 = new wxListBox( parent, ID_STRUCTFILES, wxDefaultPosition, wxSize(80,120), 0, strs40, wxLB_SINGLE );
    item38->Add( item40, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item41 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item42 = new wxStaticText( parent, ID_TEXT, _(" Visibility distance: "), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item42, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxTextCtrl *item43 = new wxTextCtrl( parent, ID_STRUCT_DISTANCE, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item41->Add( item43, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item44 = new wxStaticText( parent, ID_TEXT, _("m"), wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( item41, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item45 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item46 = new wxCheckBox( parent, ID_CHECK_STRUCTURE_SHADOWS, _("Structure shadows (preliminary!)"), wxDefaultPosition, wxDefaultSize, 0 );
    item45->Add( item46, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item47 = new wxBoxSizer( wxHORIZONTAL );

    item47->Add( 20, 10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item48 = new wxStaticText( parent, ID_TEXT, _("Resolution:"), wxDefaultPosition, wxDefaultSize, 0 );
    item47->Add( item48, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs49 = (wxString*) NULL;
    wxChoice *item49 = new wxChoice( parent, ID_CHOICE_SHADOW_REZ, wxDefaultPosition, wxSize(100,-1), 0, strs49, 0 );
    item47->Add( item49, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item45->Add( item47, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item38->Add( item45, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item34->Add( item38, 0, wxGROW|wxALL, 5 );

    wxBoxSizer *item50 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item51 = new wxCheckBox( parent, ID_VEHICLES, _("Enable Vehicles"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTER|wxALL, 5 );

    item34->Add( item50, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item34, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TParams4Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, _("Navigation") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxBoxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Style:"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs5 = (wxString*) NULL;
    wxChoice *item5 = new wxChoice( parent, ID_NAV_STYLE, wxDefaultPosition, wxSize(100,-1), 0, strs5, 0 );
    item3->Add( item5, 1, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, _("Minimum height above ground: "), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_MINHEIGHT, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item9, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Navigation speed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_NAVSPEED, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("meters/frame"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 0 );

    item1->Add( item10, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item15 = new wxCheckBox( parent, ID_ACCEL, _("Accelerate by height above ground"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item14, 0, wxALIGN_CENTER, 5 );

    wxBoxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Default Locations File:"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs18 = (wxString*) NULL;
    wxComboBox *item18 = new wxComboBox( parent, ID_LOCFILE, wxT(""), wxDefaultPosition, wxSize(140,-1), 0, strs18, wxCB_DROPDOWN|wxCB_SORT );
    item16->Add( item18, 1, wxALIGN_CENTER|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, _("Initial Camera Location"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs21 = (wxString*) NULL;
    wxChoice *item21 = new wxChoice( parent, ID_INIT_LOCATION, wxDefaultPosition, wxSize(140,-1), 0, strs21, 0 );
    item19->Add( item21, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item1->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, _("Near clipping (\"Hither\") distance"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, ID_HITHER, wxT(""), wxDefaultPosition, wxSize(50,-1), 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxBOTTOM, 5 );

    wxStaticText *item25 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item22, 0, wxALIGN_CENTER, 5 );

    item0->Add( item1, 0, wxALL, 10 );

    wxStaticBox *item27 = new wxStaticBox( parent, -1, _("Time") );
    wxStaticBoxSizer *item26 = new wxStaticBoxSizer( item27, wxVERTICAL );

    wxBoxSizer *item28 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, _("Initial Time: "), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, ID_TEXT_INIT_TIME, wxT(""), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item28->Add( item30, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxButton *item31 = new wxButton( parent, ID_SET_INIT_TIME, _("Set"), wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item31, 0, wxALIGN_CENTER|wxALL, 5 );

    item26->Add( item28, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item32 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item33 = new wxCheckBox( parent, ID_TIMEMOVES, _("Time Moves"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item33, 0, wxALIGN_CENTER|wxALL, 5 );

    item26->Add( item32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxBoxSizer *item34 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT, _("Faster than real: "), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER|wxALL, 0 );

    wxTextCtrl *item36 = new wxTextCtrl( parent, ID_TIMESPEED, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item34->Add( item36, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item37 = new wxStaticText( parent, ID_TEXT, _("x"), wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item37, 0, wxALIGN_CENTER|wxALL, 5 );

    item26->Add( item34, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item26, 1, wxALIGN_CENTER_HORIZONTAL|wxRIGHT|wxTOP|wxBOTTOM, 10 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TerrManFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxTreeCtrl *item2 = new wxTreeCtrl( parent, ID_TREECTRL, wxDefaultPosition, wxSize(380,240), wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER );
    item1->Add( item2, 1, wxGROW|wxALL, 5 );

    wxBoxSizer *item3 = new wxBoxSizer( wxVERTICAL );

    wxButton *item4 = new wxButton( parent, ID_ADD_PATH, _("Add Path"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_ADD_TERRAIN, _("Add Terrain"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item6 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item3->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_COPY, _("Add Copy"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, ID_DELETE, _("Delete"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item9 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item3->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, ID_EDIT_PARAMS, _("Edit Parameters"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    item3->Add( 20, 10, 1, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, wxID_OK, _("OK"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TParams5Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxCheckBox *item3 = new wxCheckBox( parent, ID_OCEANPLANE, _("Ocean plane"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    item4->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Level (meters)"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_OCEANPLANEOFFSET, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item7 = new wxCheckBox( parent, ID_DEPRESSOCEAN, _("Depress Ocean"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    item8->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _("Level (meters)"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_DEPRESSOCEANOFFSET, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxCheckBox *item11 = new wxCheckBox( parent, ID_SKY, _("Sky dome"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    item12->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxString *strs13 = (wxString*) NULL;
    wxComboBox *item13 = new wxComboBox( parent, ID_SKYTEXTURE, wxT(""), wxDefaultPosition, wxSize(200,-1), 0, strs13, wxCB_DROPDOWN );
    item12->Add( item13, 1, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 0 );

    wxCheckBox *item14 = new wxCheckBox( parent, ID_HORIZON, _("Artificial Horizon"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item16 = new wxCheckBox( parent, ID_FOG, _("Fog"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("Distance (km)"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_FOG_DISTANCE, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item15->Add( item18, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item15, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, _("Scene background color:"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticBitmap *item21 = new wxStaticBitmap( parent, ID_COLOR3, MyBitmapsFunc( 0 ), wxDefaultPosition, wxSize(32,18) );
    item19->Add( item21, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxButton *item22 = new wxButton( parent, ID_BGCOLOR, _("Set"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    item1->Add( item19, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxRIGHT|wxTOP, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TParams6Func( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item1 = new wxCheckBox( parent, ID_LABELS, _("Feature labels"), wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 10 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, wxT("") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxBoxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    item4->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 0 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, _("Read features from file:"), wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs6 = (wxString*) NULL;
    wxComboBox *item6 = new wxComboBox( parent, ID_LABEL_FILE, wxT(""), wxDefaultPosition, wxSize(240,-1), 0, strs6, wxCB_DROPDOWN );
    item4->Add( item6, 0, wxALIGN_CENTER|wxTOP, 5 );

    item2->Add( item4, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    item7->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, _("Field to use:"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxString *strs9 = (wxString*) NULL;
    wxChoice *item9 = new wxChoice( parent, ID_LABEL_FIELD, wxDefaultPosition, wxSize(160,-1), 0, strs9, 0 );
    item7->Add( item9, 0, wxALIGN_CENTER|wxTOP, 5 );

    item2->Add( item7, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    item10->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Height above ground"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_LABEL_HEIGHT, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item10, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxBoxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    item14->Add( 20, 20, 0, wxALIGN_CENTER, 5 );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, _("Label Size (vertical)"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_LABEL_SIZE, wxT(""), wxDefaultPosition, wxSize(80,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, _("meters"), wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    item2->Add( item14, 0, wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *g_pLayerSizer1;
wxSizer *g_pLayerSizer2;
wxSizer *LayerDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );
    g_pLayerSizer1 = item0;

    wxBoxSizer *item1 = new wxBoxSizer( wxVERTICAL );
    g_pLayerSizer2 = item1;

    wxButton *item2 = new wxButton( parent, ID_LAYER_ACTIVE, _("Set Active"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item3 = new wxCheckBox( parent, ID_LAYER_VISIBLE, _("Visible"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item4 = new wxCheckBox( parent, ID_SHADOW_VISIBLE , _("Shadow"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item5 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item6 = new wxButton( parent, ID_LAYER_ZOOM_TO, _("Zoom To"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item7 = new wxButton( parent, ID_LAYER_SAVE, _("Save"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, ID_LAYER_CREATE, _("Create"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, ID_LAYER_REMOVE, _("Remove"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticLine *item10 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item1->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item11 = new wxCheckBox( parent, ID_SHOW_ALL, _("Show All"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER, 5 );

    wxTreeCtrl *item12 = new wxTreeCtrl( parent, ID_LAYER_TREE, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxSUNKEN_BORDER );
    item0->Add( item12, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

wxSizer *TimeDialogFunc( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxBoxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, _("Year:"), wxDefaultPosition, wxDefaultSize, 0 );
    item2->Enable( false );
    item1->Add( item2, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item3 = new wxSpinCtrl( parent, ID_SPIN_YEAR, wxT("2000"), wxDefaultPosition, wxSize(60,-1), 0, 1970, 2038, 2000 );
    item1->Add( item3, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, _("Month"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item5 = new wxSpinCtrl( parent, ID_SPIN_MONTH, wxT("1"), wxDefaultPosition, wxSize(60,-1), 0, 1, 12, 1 );
    item1->Add( item5, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, _("Day"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item7 = new wxSpinCtrl( parent, ID_SPIN_DAY, wxT("1"), wxDefaultPosition, wxSize(60,-1), 0, 1, 32, 1 );
    item1->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, _("Hour:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item10 = new wxSpinCtrl( parent, ID_SPIN_HOUR, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0, 0, 24, 0 );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, _("Minute"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item12 = new wxSpinCtrl( parent, ID_SPIN_MINUTE, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0, 0, 60, 0 );
    item8->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, _("Second"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSpinCtrl *item14 = new wxSpinCtrl( parent, ID_SPIN_SECOND, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0, 0, 60, 0 );
    item8->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item8, 0, wxALIGN_CENTER|wxALL, 0 );

    wxBoxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item16 = new wxStaticText( parent, ID_TEXT, _("Speed:"), wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item17 = new wxTextCtrl( parent, ID_TEXT_SPEED, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item15->Add( item17, 0, wxALIGN_CENTER|wxALL, 5 );

    wxSlider *item18 = new wxSlider( parent, ID_SLIDER_SPEED, 0, 0, 100, wxDefaultPosition, wxSize(140,-1), wxSL_HORIZONTAL );
    item15->Add( item18, 0, wxALIGN_CENTER, 5 );

    wxButton *item19 = new wxButton( parent, ID_STOP, _("Stop"), wxDefaultPosition, wxSize(70,-1), 0 );
    item15->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item15, 0, wxALIGN_CENTER|wxALL, 0 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions

wxBitmap MyBitmapsFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 18 6 1",
        "a c Black",
        "b c #FF00FF",
        "c c #FFFF00",
        "d c #FF0000",
        "e c #0000FF",
        "f c #00FF00",
        /* pixels */
        "dfebaaaaaaabefdaaaaaaaaaaaaccccc",
        "adfebaaaaaaabefdaaaaaaaaaaaacccc",
        "aadfebaaaaaaabefdaaaaaaaaaaaaccc",
        "aaadfebaaaaaaabefdaaaaaaaaaaaacc",
        "aaaadfebaaaaaaabefdaaaaaaaaaaaac",
        "aaaaadfebaaaaaaabefdaaaaaaaaaaaa",
        "aaaaaadfebaaaaaaabefdaaaaaaaaaaa",
        "aaaaaaadfebaaaaaaabefdaaaaaaaaaa",
        "aaaaaaaadfebaaaaaaabefdaaaaaaaaa",
        "aaaaaaaaadfebaaaaaaabefdaaaaaaaa",
        "aaaaaaaaaadfebaaaaaaabefdaaaaaaa",
        "aaaaaaaaaaadfebaaaaaaabefdaaaaaa",
        "aaaaaaaaaaaadfebaaaaaaabefdaaaaa",
        "caaaaaaaaaaaadfebaaaaaaabefdaaaa",
        "ccaaaaaaaaaaaadfebaaaaaaabefdaaa",
        "cccaaaaaaaaaaaadfebaaaaaaabefdaa",
        "ccccaaaaaaaaaaaadfebaaaaaaabefda",
        "cccccaaaaaaaaaaaadfebaaaaaaabefd"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c Black",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "    aa     a    ",
        "    aa    aa    ",
        "    aa   aaa    ",
        "    aa  aaaa    ",
        "    aa aaaaa    ",
        "    aa  aaaa    ",
        "    aa   aaa    ",
        "    aa    aa    ",
        "    aa     a    ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 2)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c Black",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "    aaaaaaaa    ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 3)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 3 1",
        "  c None",
        "a c Black",
        "b c #808080",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "     ab         ",
        "     aab        ",
        "     aaab       ",
        "     aaaab      ",
        "     aaaaab     ",
        "     aaaab      ",
        "     aaab       ",
        "     aab        ",
        "     ab         ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 4)
    {
        /* XPM */
        static const char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "16 15 2 1",
        "  c None",
        "a c #FF0000",
        /* pixels */
        "                ",
        "                ",
        "                ",
        "    aaa    aa   ",
        "   aaaaa  aaa   ",
        "  aaaaaaa  aa   ",
        "  aaaaaaa  aa   ",
        "  aaaaaaa  aa   ",
        "  aaaaaaa  aa   ",
        "   aaaaa   aa   ",
        "    aaa   aaaa  ",
        "                ",
        "                ",
        "                ",
        "                "
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file

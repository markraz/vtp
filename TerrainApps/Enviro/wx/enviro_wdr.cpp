//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: enviro.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#ifdef __GNUG__
    #pragma implementation "enviro_wdr.cpp"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

// Include private header
#include "enviro_wdr.h"


// Implement window functions

void StartupDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, "Launch with:" );
    wxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxRadioButton *item3 = new wxRadioButton( parent, ID_EARTHVIEW, "Earth View", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_IMAGETEXT, "Image:  ", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxString *strs6 = (wxString*) NULL;
    wxComboBox *item6 = new wxComboBox( parent, ID_IMAGE, "", wxDefaultPosition, wxSize(125,100), 0, strs6, wxCB_DROPDOWN );
    item4->Add( item6, 0, wxALIGN_CENTRE|wxALL, 0 );

    item1->Add( item4, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxRadioButton *item7 = new wxRadioButton( parent, ID_TERRAIN, "Terrain", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_TNAME, "", wxDefaultPosition, wxSize(125,-1), wxTE_READONLY );
    item8->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, ID_TSELECT, "Select...", wxDefaultPosition, wxSize(55,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxButton *item11 = new wxButton( parent, ID_EDITPROP, "Edit Properties", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    item1->Add( item8, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 10 );

    wxStaticBox *item13 = new wxStaticBox( parent, -1, "Global options" );
    wxSizer *item12 = new wxStaticBoxSizer( item13, wxVERTICAL );

    wxSizer *item14 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item15 = new wxGridSizer( 2, 0, 0 );

    wxCheckBox *item16 = new wxCheckBox( parent, ID_FULLSCREEN, "Full Screen", wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item17 = new wxCheckBox( parent, ID_GRAVITY, "Velocity && Gravity", wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item18 = new wxCheckBox( parent, ID_FLOATING, "Floating Toolbar", wxDefaultPosition, wxDefaultSize, 0 );
    item18->Enable( FALSE );
    item15->Add( item18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item19 = new wxCheckBox( parent, ID_SOUND, "Sound", wxDefaultPosition, wxDefaultSize, 0 );
    item19->Enable( FALSE );
    item15->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item20 = new wxCheckBox( parent, ID_HTML_PANE, "HTML Pane", wxDefaultPosition, wxDefaultSize, 0 );
    item20->Enable( FALSE );
    item15->Add( item20, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item21 = new wxCheckBox( parent, ID_VCURSOR, "Virtual Cursor", wxDefaultPosition, wxDefaultSize, 0 );
    item21->Enable( FALSE );
    item15->Add( item21, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item14->Add( item15, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item22 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item23 = new wxStaticText( parent, ID_TEXT, "Size Exaggeration for Plants and Fences: ", wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item23, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxTextCtrl *item24 = new wxTextCtrl( parent, ID_PLANTSIZE, "", wxDefaultPosition, wxSize(50,-1), 0 );
    item22->Add( item24, 0, wxALIGN_CENTRE|wxALL, 0 );

    item14->Add( item22, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxCheckBox *item25 = new wxCheckBox( parent, ID_SHADOWS, "Plant Shadows", wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item25, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item12->Add( item14, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 10 );

    wxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item27 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxSize(60,-1), 0 );
    item26->Add( item27, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxSize(70,-1), 0 );
    item26->Add( item28, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item29 = new wxButton( parent, ID_OPENGL, "OpenGL Info...", wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item29, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item26, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void TerrainDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxString *strs2 = (wxString*) NULL;
    wxListBox *item2 = new wxListBox( parent, ID_TLIST, wxDefaultPosition, wxSize(80,100), 0, strs2, 0 );
    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item4 = new wxButton( parent, ID_NEW, "New", wxDefaultPosition, wxSize(40,-1), 0 );
    item4->Enable( FALSE );
    item3->Add( item4, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_DELETE, "Delete", wxDefaultPosition, wxSize(60,-1), 0 );
    item5->Enable( FALSE );
    item3->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    item1->Add( item3, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_CENTRE|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxButton *item7 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void SceneGraphFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTreeCtrl *item1 = new wxTreeCtrl( parent, ID_SCENETREE, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxSUNKEN_BORDER );
    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item2 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item3 = new wxCheckBox( parent, ID_ENABLED, "Enabled", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item3, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item4 = new wxButton( parent, ID_ZOOMTO, "Zoom To", wxDefaultPosition, wxSize(60,-1), 0 );
    item2->Add( item4, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item5 = new wxButton( parent, ID_REFRESH, "Refresh", wxDefaultPosition, wxSize(55,-1), 0 );
    item2->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item2, 0, wxALIGN_CENTRE|wxALL, 0 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void TParamsFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item2 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, "Terrain Filename: ", wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxString *strs7 = (wxString*) NULL;
    wxComboBox *item7 = new wxComboBox( parent, ID_FILENAME, "", wxDefaultPosition, wxSize(140,-1), 0, strs7, wxCB_DROPDOWN );
    item5->Add( item7, 0, wxALIGN_CENTRE|wxALL, 0 );

    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, "Vertical Exaggeration:", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_VERTEXAG, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, "x", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item11, 0, wxALIGN_CENTRE|wxALL, 0 );

    item4->Add( item8, 0, wxALIGN_CENTRE|wxALL, 0 );

    item3->Add( item4, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxStaticLine *item12 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item3->Add( item12, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxSizer *item13 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, "Initial Time of Day: ", wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_INITTIME, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTRE|wxALL, 0 );

    item13->Add( item14, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item17 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item18 = new wxCheckBox( parent, ID_TIMEMOVES, "Time Moves", wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item18, 0, wxALIGN_CENTRE|wxALL, 5 );

    item13->Add( item17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, "Faster than real: ", wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_TIMESPEED, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item19->Add( item21, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxStaticText *item22 = new wxStaticText( parent, ID_TEXT, "x", wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item22, 0, wxALIGN_CENTRE|wxALL, 0 );

    item13->Add( item19, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item3->Add( item13, 0, wxALIGN_CENTRE|wxLEFT|wxTOP|wxBOTTOM, 5 );

    item2->Add( item3, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item24 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item25 = new wxCheckBox( parent, ID_REGULAR, "Brute-force terrain mesh", wxDefaultPosition, wxDefaultSize, 0 );
    item24->Add( item25, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item27 = new wxStaticBox( parent, -1, "" );
    wxSizer *item26 = new wxStaticBoxSizer( item27, wxVERTICAL );

    wxSizer *item28 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item29 = new wxStaticText( parent, ID_TEXT, " Subsample Ratio: ", wxDefaultPosition, wxDefaultSize, 0 );
    item28->Add( item29, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, ID_SUBSAMPLE, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item28->Add( item30, 0, wxALIGN_CENTRE|wxALL, 5 );

    item26->Add( item28, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxCheckBox *item31 = new wxCheckBox( parent, ID_SUPPRESSLAND, "Suppress Land", wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item31, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item32 = new wxCheckBox( parent, ID_VERTEXCOLORS, "Apply vertex colors", wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item32, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item24->Add( item26, 0, wxALL, 0 );

    item23->Add( item24, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxStaticLine *item33 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item23->Add( item33, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxSizer *item34 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item35 = new wxCheckBox( parent, ID_DYNAMIC, "Dynamic LOD Terrain", wxDefaultPosition, wxDefaultSize, 0 );
    item34->Add( item35, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item37 = new wxStaticBox( parent, -1, "" );
    wxSizer *item36 = new wxStaticBoxSizer( item37, wxVERTICAL );

    wxSizer *item38 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item39 = new wxStaticText( parent, ID_TEXT, "Method:", wxDefaultPosition, wxDefaultSize, 0 );
    item38->Add( item39, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString strs40[] = 
    {
        "Item", 
        "Item", 
        "Item", 
        "Item"
    };
    wxChoice *item40 = new wxChoice( parent, ID_LODMETHOD, wxDefaultPosition, wxSize(120,-1), 4, strs40, 0 );
    item38->Add( item40, 0, wxALIGN_CENTRE|wxALL, 5 );

    item36->Add( item38, 0, wxALIGN_CENTRE|wxRIGHT|wxTOP, 5 );

    wxSizer *item41 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item42 = new wxStaticText( parent, ID_TEXT, "Pixel Error Bound: ", wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item42, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item43 = new wxTextCtrl( parent, ID_PIXELERROR, "", wxDefaultPosition, wxSize(60,-1), 0 );
    item41->Add( item43, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxStaticText *item44 = new wxStaticText( parent, ID_TEXT, "Triangle Count: ", wxDefaultPosition, wxDefaultSize, 0 );
    item41->Add( item44, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item45 = new wxTextCtrl( parent, ID_TRICOUNT, "", wxDefaultPosition, wxSize(60,-1), 0 );
    item41->Add( item45, 0, wxALIGN_CENTRE|wxALL, 0 );

    item36->Add( item41, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item46 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item47 = new wxCheckBox( parent, ID_TRISTRIPS, "Use strips/fans", wxDefaultPosition, wxDefaultSize, 0 );
    item46->Add( item47, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item48 = new wxCheckBox( parent, ID_DETAILTEXTURE, "Detail texture", wxDefaultPosition, wxDefaultSize, 0 );
    item46->Add( item48, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item36->Add( item46, 0, wxALIGN_CENTRE|wxALL, 0 );

    item34->Add( item36, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item23->Add( item34, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    item2->Add( item23, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxTOP, 5 );

    item1->Add( item2, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item49 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item50 = new wxBoxSizer( wxVERTICAL );

    wxButton *item51 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item51, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item52 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item52, 0, wxALIGN_CENTRE|wxALL, 5 );

    item49->Add( item50, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxCheckBox *item53 = new wxCheckBox( parent, ID_LABELS, "Floating labels", wxDefaultPosition, wxDefaultSize, 0 );
    item53->Enable( FALSE );
    item49->Add( item53, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item54 = new wxCheckBox( parent, ID_SKY, "Sky dome", wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item54, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item55 = new wxCheckBox( parent, ID_OCEANPLANE, "Ocean plane", wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item55, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item56 = new wxCheckBox( parent, ID_HORIZON, "Artificial Horizon", wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item56, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item57 = new wxCheckBox( parent, ID_AIRPORTS, "Airports", wxDefaultPosition, wxDefaultSize, 0 );
    item49->Add( item57, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item58 = new wxCheckBox( parent, ID_FOG, "Fog", wxDefaultPosition, wxDefaultSize, 0 );
    item58->Enable( FALSE );
    item49->Add( item58, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item49, 1, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxTOP, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxSizer *item59 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item60 = new wxBoxSizer( wxVERTICAL );

    wxStaticBox *item62 = new wxStaticBox( parent, -1, "Navigation" );
    wxSizer *item61 = new wxStaticBoxSizer( item62, wxVERTICAL );

    wxSizer *item63 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item64 = new wxStaticText( parent, ID_TEXT, "Minimum height above ground: ", wxDefaultPosition, wxDefaultSize, 0 );
    item63->Add( item64, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item65 = new wxTextCtrl( parent, ID_MINHEIGHT, "", wxDefaultPosition, wxSize(50,-1), 0 );
    item63->Add( item65, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxStaticText *item66 = new wxStaticText( parent, ID_TEXT, "meters", wxDefaultPosition, wxDefaultSize, 0 );
    item63->Add( item66, 0, wxALIGN_CENTRE|wxALL, 0 );

    item61->Add( item63, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item67 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item68 = new wxStaticText( parent, ID_TEXT, "Navigation speed:", wxDefaultPosition, wxDefaultSize, 0 );
    item67->Add( item68, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item69 = new wxTextCtrl( parent, ID_NAVSPEED, "", wxDefaultPosition, wxSize(50,-1), 0 );
    item67->Add( item69, 0, wxALIGN_CENTRE|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxStaticText *item70 = new wxStaticText( parent, ID_TEXT, "meters/frame", wxDefaultPosition, wxDefaultSize, 0 );
    item67->Add( item70, 0, wxALIGN_CENTRE|wxALL, 0 );

    item61->Add( item67, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item71 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item72 = new wxStaticText( parent, ID_TEXT, "Default Locations File:", wxDefaultPosition, wxDefaultSize, 0 );
    item71->Add( item72, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString *strs73 = (wxString*) NULL;
    wxComboBox *item73 = new wxComboBox( parent, ID_LOCFILE, "", wxDefaultPosition, wxSize(120,-1), 0, strs73, wxCB_DROPDOWN );
    item71->Add( item73, 0, wxALIGN_CENTRE|wxRIGHT|wxBOTTOM, 5 );

    item61->Add( item71, 0, wxALIGN_CENTRE|wxALL, 0 );

    item60->Add( item61, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticBox *item75 = new wxStaticBox( parent, -1, "Texture" );
    wxSizer *item74 = new wxStaticBoxSizer( item75, wxVERTICAL );

    wxRadioButton *item76 = new wxRadioButton( parent, ID_NONE, "No texture", wxDefaultPosition, wxDefaultSize, 0 );
    item74->Add( item76, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item77 = new wxBoxSizer( wxHORIZONTAL );

    wxRadioButton *item78 = new wxRadioButton( parent, ID_SINGLE, "Single texture ", wxDefaultPosition, wxDefaultSize, 0 );
    item77->Add( item78, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxString *strs79 = (wxString*) NULL;
    wxComboBox *item79 = new wxComboBox( parent, ID_TFILESINGLE, "", wxDefaultPosition, wxSize(150,-1), 0, strs79, wxCB_DROPDOWN );
    item77->Add( item79, 0, wxALIGN_CENTRE|wxALL, 0 );

    item74->Add( item77, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxRadioButton *item80 = new wxRadioButton( parent, ID_DERIVED, "Derive texture from elevation", wxDefaultPosition, wxDefaultSize, 0 );
    item74->Add( item80, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxRadioButton *item81 = new wxRadioButton( parent, ID_TILED, "4x4 Tiled texture", wxDefaultPosition, wxDefaultSize, 0 );
    item74->Add( item81, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item82 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item83 = new wxStaticText( parent, ID_TEXT, "Tile size: ", wxDefaultPosition, wxDefaultSize, 0 );
    item82->Add( item83, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item84 = new wxTextCtrl( parent, ID_TILESIZE, "", wxDefaultPosition, wxSize(50,-1), 0 );
    item82->Add( item84, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item85 = new wxStaticText( parent, ID_TEXT, "Filename base: ", wxDefaultPosition, wxDefaultSize, 0 );
    item82->Add( item85, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item86 = new wxTextCtrl( parent, ID_TFILEBASE, "", wxDefaultPosition, wxSize(100,-1), 0 );
    item82->Add( item86, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item87 = new wxStaticText( parent, ID_TEXT, "Filename: ", wxDefaultPosition, wxDefaultSize, 0 );
    item82->Add( item87, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxTextCtrl *item88 = new wxTextCtrl( parent, ID_TFILENAME, "", wxDefaultPosition, wxSize(150,-1), 0 );
    item82->Add( item88, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item74->Add( item82, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxSizer *item89 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item90 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item91 = new wxCheckBox( parent, ID_MIPMAP, "Mipmapping", wxDefaultPosition, wxDefaultSize, 0 );
    item90->Add( item91, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item92 = new wxCheckBox( parent, ID_16BIT, "Request 16-bit", wxDefaultPosition, wxDefaultSize, 0 );
    item90->Add( item92, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item89->Add( item90, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxSizer *item93 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item94 = new wxCheckBox( parent, ID_PRELIGHT, "Precompute lighting", wxDefaultPosition, wxDefaultSize, 0 );
    item93->Add( item94, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item95 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item96 = new wxStaticText( parent, ID_TEXT, "Lighting factor: ", wxDefaultPosition, wxDefaultSize, 0 );
    item95->Add( item96, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxTextCtrl *item97 = new wxTextCtrl( parent, ID_LIGHT_FACTOR, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item95->Add( item97, 0, wxALIGN_CENTRE|wxALL, 0 );

    item93->Add( item95, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item98 = new wxCheckBox( parent, ID_PRELIT, "Pre-lit", wxDefaultPosition, wxDefaultSize, 0 );
    item93->Add( item98, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item89->Add( item93, 0, wxALIGN_CENTRE|wxALL, 0 );

    item74->Add( item89, 0, wxALIGN_CENTRE|wxALL, 0 );

    item60->Add( item74, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item59->Add( item60, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxSizer *item99 = new wxBoxSizer( wxVERTICAL );

    wxCheckBox *item100 = new wxCheckBox( parent, ID_TREES, "Trees", wxDefaultPosition, wxDefaultSize, 0 );
    item99->Add( item100, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item102 = new wxStaticBox( parent, -1, "" );
    wxSizer *item101 = new wxStaticBoxSizer( item102, wxVERTICAL );

    wxSizer *item103 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item104 = new wxStaticText( parent, ID_TEXT, " Source file: ", wxDefaultPosition, wxDefaultSize, 0 );
    item103->Add( item104, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxString *strs105 = (wxString*) NULL;
    wxComboBox *item105 = new wxComboBox( parent, ID_TREEFILE, "", wxDefaultPosition, wxSize(140,-1), 0, strs105, wxCB_DROPDOWN );
    item103->Add( item105, 0, wxALIGN_CENTRE|wxALL, 5 );

    item101->Add( item103, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item106 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item107 = new wxStaticText( parent, ID_TEXT, " Visibility distance: ", wxDefaultPosition, wxDefaultSize, 0 );
    item106->Add( item107, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxTextCtrl *item108 = new wxTextCtrl( parent, ID_TREEDISTANCE, "", wxDefaultPosition, wxSize(50,-1), 0 );
    item106->Add( item108, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxStaticText *item109 = new wxStaticText( parent, ID_TEXT, "km", wxDefaultPosition, wxDefaultSize, 0 );
    item106->Add( item109, 0, wxALIGN_CENTRE|wxALL, 5 );

    item101->Add( item106, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item99->Add( item101, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticLine *item110 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(1,-1), wxLI_HORIZONTAL );
    item99->Add( item110, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxCheckBox *item111 = new wxCheckBox( parent, ID_ROADS, "Roads", wxDefaultPosition, wxDefaultSize, 0 );
    item99->Add( item111, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticBox *item113 = new wxStaticBox( parent, -1, "" );
    wxSizer *item112 = new wxStaticBoxSizer( item113, wxVERTICAL );

    wxSizer *item114 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item115 = new wxStaticText( parent, ID_TEXT, "  Source file: ", wxDefaultPosition, wxDefaultSize, 0 );
    item114->Add( item115, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxString *strs116 = (wxString*) NULL;
    wxComboBox *item116 = new wxComboBox( parent, ID_ROADFILE, "", wxDefaultPosition, wxSize(140,-1), 0, strs116, wxCB_DROPDOWN );
    item114->Add( item116, 0, wxALIGN_CENTRE|wxALL, 5 );

    item112->Add( item114, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item117 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item118 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item119 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item120 = new wxStaticText( parent, ID_TEXT, "Ground offset: ", wxDefaultPosition, wxDefaultSize, 0 );
    item119->Add( item120, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item121 = new wxTextCtrl( parent, ID_ROADHEIGHT, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item119->Add( item121, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item122 = new wxStaticText( parent, ID_TEXT, "meters", wxDefaultPosition, wxDefaultSize, 0 );
    item119->Add( item122, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item123 = new wxStaticText( parent, ID_TEXT, "Visibility distance:", wxDefaultPosition, wxDefaultSize, 0 );
    item119->Add( item123, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item124 = new wxTextCtrl( parent, ID_ROADDISTANCE, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item119->Add( item124, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticText *item125 = new wxStaticText( parent, ID_TEXT, "km", wxDefaultPosition, wxDefaultSize, 0 );
    item119->Add( item125, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item118->Add( item119, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxCheckBox *item126 = new wxCheckBox( parent, ID_TEXROADS, "Texture-map roads", wxDefaultPosition, wxDefaultSize, 0 );
    item118->Add( item126, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item127 = new wxCheckBox( parent, ID_ROADCULTURE, "Road culture (stoplights, etc.)", wxDefaultPosition, wxDefaultSize, 0 );
    item118->Add( item127, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item117->Add( item118, 0, wxALIGN_CENTRE|wxALL, 0 );

    item112->Add( item117, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item128 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item129 = new wxStaticText( parent, ID_TEXT, "Include:", wxDefaultPosition, wxDefaultSize, 0 );
    item128->Add( item129, 0, wxALIGN_CENTRE|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxCheckBox *item130 = new wxCheckBox( parent, ID_HIGHWAYS, "Highways", wxDefaultPosition, wxDefaultSize, 0 );
    item128->Add( item130, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxCheckBox *item131 = new wxCheckBox( parent, ID_PAVED, "Paved", wxDefaultPosition, wxDefaultSize, 0 );
    item128->Add( item131, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item132 = new wxCheckBox( parent, ID_DIRT, "Dirt", wxDefaultPosition, wxDefaultSize, 0 );
    item128->Add( item132, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item112->Add( item128, 0, wxALIGN_CENTRE|wxALL, 5 );

    item99->Add( item112, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item133 = new wxBoxSizer( wxHORIZONTAL );

    wxCheckBox *item134 = new wxCheckBox( parent, ID_BUILDINGS, "Buildings: ", wxDefaultPosition, wxDefaultSize, 0 );
    item133->Add( item134, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxString *strs135 = (wxString*) NULL;
    wxComboBox *item135 = new wxComboBox( parent, ID_BUILDINGFILE, "", wxDefaultPosition, wxSize(140,-1), 0, strs135, wxCB_DROPDOWN );
    item133->Add( item135, 0, wxALIGN_CENTRE|wxALL, 0 );

    item99->Add( item133, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item59->Add( item99, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    item0->Add( item59, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void PlantDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, " Species:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_SPECIES, wxDefaultPosition, wxSize(160,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "      Size:", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_SIZEEDIT, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSlider *item7 = new wxSlider( parent, ID_SIZESLIDER, 0, 0, 100, wxDefaultPosition, wxSize(120,-1), wxSL_HORIZONTAL );
    item4->Add( item7, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, "Spacing:", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_SPACINGEDIT, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void FenceDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, "Type:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_FENCETYPE, wxDefaultPosition, wxSize(150,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "Height:", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_HEIGHTEDIT, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSlider *item7 = new wxSlider( parent, ID_HEIGHTSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(110,-1), 0 );
    item4->Add( item7, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item8 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, "Spacing:", wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_SPACINGEDIT, "", wxDefaultPosition, wxSize(40,-1), 0 );
    item8->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSlider *item11 = new wxSlider( parent, ID_SPACINGSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(110,-1), 0 );
    item8->Add( item11, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item8, 0, wxALIGN_CENTRE|wxALL, 0 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void LocationDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxHORIZONTAL );

    wxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxString *strs2 = (wxString*) NULL;
    wxListBox *item2 = new wxListBox( parent, ID_LOCLIST, wxDefaultPosition, wxDefaultSize, 0, strs2, 0 );
    item1->Add( item2, 1, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxSizer *item3 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item4 = new wxButton( parent, ID_SAVE, "Save", wxDefaultPosition, wxSize(40,-1), 0 );
    item3->Add( item4, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxButton *item5 = new wxButton( parent, ID_LOAD, "Load", wxDefaultPosition, wxSize(40,-1), 0 );
    item3->Add( item5, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item1->Add( item3, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item1, 1, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 0 );

    wxSizer *item6 = new wxBoxSizer( wxVERTICAL );

    wxButton *item7 = new wxButton( parent, ID_RECALL, "Recall ->", wxDefaultPosition, wxSize(60,-1), 0 );
    item6->Add( item7, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, ID_STORE, "<- Store", wxDefaultPosition, wxSize(60,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item9 = new wxButton( parent, ID_STOREAS, "Store As..", wxDefaultPosition, wxSize(60,-1), 0 );
    item6->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item10 = new wxButton( parent, ID_REMOVE, "Remove", wxDefaultPosition, wxSize(60,-1), 0 );
    item6->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxTOP, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void CameraDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, "Horizontal FOV (degrees)", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_FOV, "", wxDefaultPosition, wxSize(60,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSlider *item4 = new wxSlider( parent, ID_FOVSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item1->Add( item4, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item1, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP, 5 );

    wxSizer *item5 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, "Near Clipping Plane (meters):", wxDefaultPosition, wxDefaultSize, 0 );
    item5->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item7 = new wxTextCtrl( parent, ID_NEAR, "", wxDefaultPosition, wxSize(60,-1), 0 );
    item5->Add( item7, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSlider *item8 = new wxSlider( parent, ID_NEARSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item5->Add( item8, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item5, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, "Far Clipping Plane (meters):", wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item11 = new wxTextCtrl( parent, ID_FAR, "", wxDefaultPosition, wxSize(60,-1), 0 );
    item9->Add( item11, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSlider *item12 = new wxSlider( parent, ID_FARSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item9->Add( item12, 0, wxALIGN_CENTRE|wxALL, 0 );

    item0->Add( item9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxStaticLine *item13 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item13, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item14 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item15 = new wxStaticText( parent, ID_TEXT, "Navigation Speed (m/frame):", wxDefaultPosition, wxDefaultSize, 0 );
    item14->Add( item15, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item16 = new wxTextCtrl( parent, ID_SPEED, "", wxDefaultPosition, wxSize(60,-1), 0 );
    item14->Add( item16, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSlider *item17 = new wxSlider( parent, ID_SPEEDSLIDER, 0, 0, 100, wxDefaultPosition, wxSize(100,-1), 0 );
    item14->Add( item17, 0, wxALIGN_CENTRE, 0 );

    item0->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxBOTTOM, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void BuildingDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, "Building Color:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBitmapButton *item3 = new wxBitmapButton( parent, ID_COLOR1, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, "Roof Color:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBitmapButton *item5 = new wxBitmapButton( parent, ID_COLOR2, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 0 );

    wxCheckBox *item6 = new wxCheckBox( parent, ID_TRIM, "Trim  Color:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxBitmapButton *item7 = new wxBitmapButton( parent, ID_COLOR3, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 0 );

    item0->Add( item1, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID_ELEVATED, "Elevated", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, "Number of Stories:", wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSpinCtrl *item11 = new wxSpinCtrl( parent, ID_STORIES, "0", wxDefaultPosition, wxSize(50,-1), 0, 0, 100, 0 );
    item9->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, "Roof Type:", wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString *strs14 = (wxString*) NULL;
    wxChoice *item14 = new wxChoice( parent, ID_ROOF, wxDefaultPosition, wxSize(100,-1), 0, strs14, 0 );
    item12->Add( item14, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item12, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item15, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void TextDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item1 = new wxTextCtrl( parent, ID_TEXT, "", wxDefaultPosition, wxSize(450,250), wxTE_MULTILINE|wxTE_READONLY );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item2 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item2, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

// Implement bitmap functions

wxBitmap MyBitmapsFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 18 6 1",
        "a c Black",
        "b c #0000FF",
        "c c #00FF00",
        "d c #FF0000",
        "e c #FF00FF",
        "f c #FFFF00",
        /* pixels */
        "dcbeaaaaaaaebcdaaaaaaaaaaaafffff",
        "adcbeaaaaaaaebcdaaaaaaaaaaaaffff",
        "aadcbeaaaaaaaebcdaaaaaaaaaaaafff",
        "aaadcbeaaaaaaaebcdaaaaaaaaaaaaff",
        "aaaadcbeaaaaaaaebcdaaaaaaaaaaaaf",
        "aaaaadcbeaaaaaaaebcdaaaaaaaaaaaa",
        "aaaaaadcbeaaaaaaaebcdaaaaaaaaaaa",
        "aaaaaaadcbeaaaaaaaebcdaaaaaaaaaa",
        "aaaaaaaadcbeaaaaaaaebcdaaaaaaaaa",
        "aaaaaaaaadcbeaaaaaaaebcdaaaaaaaa",
        "aaaaaaaaaadcbeaaaaaaaebcdaaaaaaa",
        "aaaaaaaaaaadcbeaaaaaaaebcdaaaaaa",
        "aaaaaaaaaaaadcbeaaaaaaaebcdaaaaa",
        "faaaaaaaaaaaadcbeaaaaaaaebcdaaaa",
        "ffaaaaaaaaaaaadcbeaaaaaaaebcdaaa",
        "fffaaaaaaaaaaaadcbeaaaaaaaebcdaa",
        "ffffaaaaaaaaaaaadcbeaaaaaaaebcda",
        "fffffaaaaaaaaaaaadcbeaaaaaaaebcd"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file

//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: VTBuilder.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#ifdef __GNUG__
    #pragma implementation "VTBuilder_wdr.cpp"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "VTBuilder_wdr.h"


// Implement window functions

void BuildingDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, "Building Color:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBitmapButton *item3 = new wxBitmapButton( parent, ID_COLOR1, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, "Roof Color:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxBitmapButton *item5 = new wxBitmapButton( parent, ID_COLOR2, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 0 );

    wxCheckBox *item6 = new wxCheckBox( parent, ID_TRIM, "Trim  Color:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxBitmapButton *item7 = new wxBitmapButton( parent, ID_COLOR3, MyBitmapsFunc( 0 ), wxDefaultPosition, wxDefaultSize );
    item1->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 0 );

    item0->Add( item1, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID_ELEVATED, "Elevated", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, "Number of Stories:", wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSpinCtrl *item11 = new wxSpinCtrl( parent, ID_STORIES, "0", wxDefaultPosition, wxSize(50,-1), 0, 0, 100, 0 );
    item9->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item13 = new wxStaticText( parent, ID_TEXT, "Roof Type:", wxDefaultPosition, wxDefaultSize, 0 );
    item12->Add( item13, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString *strs14 = (wxString*) NULL;
    wxChoice *item14 = new wxChoice( parent, ID_ROOF, wxDefaultPosition, wxSize(100,-1), 0, strs14, 0 );
    item12->Add( item14, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item12, 0, wxALIGN_CENTRE|wxALL, 0 );

    wxSizer *item15 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item16 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item16, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item17 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item15->Add( item17, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item15, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void ExtentDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, "Extents" );
    wxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "North:", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_EXTENT_N, "", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item4, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT, 5 );

    wxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, "West:", wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_EXTENT_W, "", wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    item7->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, "East:", wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_EXTENT_E, "", wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item12, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item7, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT, 5 );

    wxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, "South:", wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_EXTENT_S, "", wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item15, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item13, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT, 5 );

    item1->Add( item2, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxSizer *item16 = new wxBoxSizer( wxVERTICAL );

    wxButton *item17 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item18 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTRE|wxALL, 5 );

    item1->Add( item16, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item19 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item20 = new wxStaticText( parent, ID_TEXT, "Origin and Size:", wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item21 = new wxTextCtrl( parent, ID_EXTENT_ALL, "", wxDefaultPosition, wxSize(310,-1), 0 );
    item19->Add( item21, 1, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item19, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void DistanceDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, "Horizontal Offset X, Y", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item2 = new wxTextCtrl( parent, ID_XY, "", wxDefaultPosition, wxSize(200,-1), 0 );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, "meters", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    item0->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_DUMMY, "", wxDefaultPosition, wxSize(200,-1), 0 );
    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item6 = new wxStaticText( parent, ID_TEXT, "degrees longitude, latitude", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, "Horizontal Distance", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item7, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_DIST, "", wxDefaultPosition, wxSize(200,-1), 0 );
    item0->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, "meters", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    item0->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item12 = new wxBoxSizer( wxHORIZONTAL );

    item0->Add( item12, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void RawDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxGridSizer( 2, 0, 0 );

    wxStaticText *item1 = new wxStaticText( parent, ID_TEXT, "Bytes per sample", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item2 = new wxTextCtrl( parent, ID_BYTES, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item0->Add( item2, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item3 = new wxStaticText( parent, ID_TEXT, "Width", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item3, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item4 = new wxTextCtrl( parent, ID_WIDTH, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item0->Add( item4, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "Height", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item5, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_HEIGHT, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item0->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxCheckBox *item7 = new wxCheckBox( parent, ID_UTM, "UTM", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item7, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxCheckBox *item8 = new wxCheckBox( parent, ID_FLOATING, "Floating point", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item9 = new wxStaticText( parent, ID_TEXT, "Vertical units in meters", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item10 = new wxTextCtrl( parent, ID_VUNITS, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item0->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, "Horizontal spacing", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item11, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_SPACING, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item0->Add( item12, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item13 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item13, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item14 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item14, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void ElevPropDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxTextCtrl *item1 = new wxTextCtrl( parent, ID_PROPS, "", wxDefaultPosition, wxSize(300,100), wxTE_MULTILINE );
    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, "Extents" );
    wxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxSizer *item4 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "Left", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item6 = new wxTextCtrl( parent, ID_LEFT, "", wxDefaultPosition, wxSize(100,-1), 0 );
    item4->Add( item6, 0, wxALIGN_CENTRE|wxALL, 0 );

    item2->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item7 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item8 = new wxStaticText( parent, ID_TEXT, "Top", wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item9 = new wxTextCtrl( parent, ID_TOP, "", wxDefaultPosition, wxSize(100,-1), 0 );
    item7->Add( item9, 0, wxALIGN_CENTRE|wxALL, 0 );

    item2->Add( item7, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, "Right", wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_RIGHT, "", wxDefaultPosition, wxSize(100,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTRE|wxALL, 0 );

    item2->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, "Bottom", wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_BOTTOM, "", wxDefaultPosition, wxSize(100,-1), 0 );
    item13->Add( item15, 0, wxALIGN_CENTRE|wxALL, 0 );

    item2->Add( item13, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    item0->Add( item2, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item17 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item18 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item18, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item16, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void ProjectionDialogFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item1 = new wxStaticText( parent, ID_CAPTION, "Caption", wxDefaultPosition, wxDefaultSize, 0 );
    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 10 );

    wxStaticBox *item3 = new wxStaticBox( parent, -1, "" );
    wxSizer *item2 = new wxStaticBoxSizer( item3, wxVERTICAL );

    wxRadioButton *item4 = new wxRadioButton( parent, ID_GEO, "Geographic (latitude-longitude)", wxDefaultPosition, wxDefaultSize, wxRB_GROUP );
    item2->Add( item4, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP, 5 );

    wxRadioButton *item5 = new wxRadioButton( parent, ID_UTM, "UTM", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item5, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    item6->Add( 20, 20, 0, wxALIGN_CENTRE, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TEXT, "Zone:", wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_UTMZONE, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item6->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item6, 0, wxALIGN_CENTRE, 5 );

    wxRadioButton *item9 = new wxRadioButton( parent, ID_ALBERS, "Albers Equal Area Conic", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item9, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxSizer *item10 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, "1st Standard Parallel", wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_PAR1, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item13 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, "2nd Standard Parallel", wxDefaultPosition, wxDefaultSize, 0 );
    item13->Add( item14, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_PAR2, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item13->Add( item15, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT, 5 );

    item2->Add( item13, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxSizer *item16 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item17 = new wxStaticText( parent, ID_TEXT, "Central Meridian", wxDefaultPosition, wxDefaultSize, 0 );
    item16->Add( item17, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxTextCtrl *item18 = new wxTextCtrl( parent, ID_MERIDIAN, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item16->Add( item18, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item16, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 0 );

    wxRadioButton *item19 = new wxRadioButton( parent, ID_STATEPLANE, "State Plane Coordinates", wxDefaultPosition, wxDefaultSize, 0 );
    item2->Add( item19, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxSizer *item20 = new wxBoxSizer( wxHORIZONTAL );

    item20->Add( 20, 20, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString *strs21 = (wxString*) NULL;
    wxChoice *item21 = new wxChoice( parent, ID_SPCHOICE, wxDefaultPosition, wxSize(200,-1), 0, strs21, 0 );
    item20->Add( item21, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item20, 0, wxALIGN_CENTRE, 5 );

    wxStaticLine *item22 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item2->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item23 = new wxBoxSizer( wxHORIZONTAL );

    wxStaticText *item24 = new wxStaticText( parent, ID_TEXT, "Datum:", wxDefaultPosition, wxDefaultSize, 0 );
    item23->Add( item24, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxString *strs25 = (wxString*) NULL;
    wxChoice *item25 = new wxChoice( parent, ID_DATUM, wxDefaultPosition, wxSize(160,-1), 0, strs25, 0 );
    item23->Add( item25, 0, wxALIGN_CENTRE|wxALL, 5 );

    item2->Add( item23, 0, wxALIGN_CENTRE, 5 );

    item0->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxSizer *item26 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item27 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item27, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item28 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item26->Add( item28, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item26, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void ImportVegFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, "Field to use:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxComboBox *item3 = new wxComboBox( parent, ID_FIELD, "", wxDefaultPosition, wxSize(160,100), 0, strs3, wxCB_DROPDOWN|wxCB_READONLY );
    item1->Add( item3, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxSizer *item4 = new wxBoxSizer( wxVERTICAL );

    wxStaticText *item5 = new wxStaticText( parent, ID_TEXT, "Interpretation of the field:", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxRadioButton *item6 = new wxRadioButton( parent, ID_DENSITY, "Density (0 to 1) (double)", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item6, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    wxRadioButton *item7 = new wxRadioButton( parent, ID_BIOTYPE1, "Biotype by name (string)", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item7, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    wxRadioButton *item8 = new wxRadioButton( parent, ID_BIOTYPE2, "Biotype by ID (integer)", wxDefaultPosition, wxDefaultSize, 0 );
    item4->Add( item8, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    item0->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxSizer *item9 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item10 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item10, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item11 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item9->Add( item11, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item9, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

void DistribVegFunc( wxPanel *parent, bool call_fit )
{
    wxSizer *item0 = new wxBoxSizer( wxVERTICAL );

    wxSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, "Grid spacing of sampling, in meters:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, IDC_SAMPLING, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item3, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, "Artificial scarcity, set to 1.0 for full density:", wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, IDC_SCARCITY, "", wxDefaultPosition, wxSize(80,-1), 0 );
    item1->Add( item5, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item1, 0, wxALIGN_CENTRE|wxLEFT|wxRIGHT|wxTOP, 5 );

    wxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );

    wxButton *item7 = new wxButton( parent, wxID_OK, "OK", wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item7, 0, wxALIGN_CENTRE|wxALL, 5 );

    wxButton *item8 = new wxButton( parent, wxID_CANCEL, "Cancel", wxDefaultPosition, wxDefaultSize, 0 );
    item6->Add( item8, 0, wxALIGN_CENTRE|wxALL, 5 );

    item0->Add( item6, 0, wxALIGN_CENTRE|wxALL, 5 );

    parent->SetAutoLayout( TRUE );
    parent->SetSizer( item0 );
    if (call_fit)
    {
        item0->Fit( parent );
        item0->SetSizeHints( parent );
    }
}

// Implement bitmap functions

wxBitmap MyBitmapsFunc( size_t index )
{
    if (index == 0)
    {
        /* XPM */
        static char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 18 5 1",
        "a c Black",
        "b c #FFFFFF",
        "c c #0000FF",
        "d c #00FF00",
        "e c #FF0000",
        /* pixels */
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaabaaaaaabaaaaaaaabaabaaaaaaaa",
        "aaaabaaaaabaaaaaaaaabaabaaaaaaaa",
        "aaaabaaaaabaaaaaaaaabaabaaaaaaaa",
        "aaaabaaabbbbaaaaaaaababbbaaaaaaa",
        "aaaabaaaaabaaaaaaaaabaabaaaaaaaa",
        "aaabbaabbabaabbabababaabaaaabaaa",
        "aababababababababababaabaaabbbaa",
        "aababababababababababaabaabbbbba",
        "aabababbaababababababaabaaabbbaa",
        "aabababaaababababababaabaaaabaaa",
        "aaabbaabbabaabababaabaabaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaeeeeeeeeaaddddddddaacccccccaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    if (index == 1)
    {
        /* XPM */
        static char *xpm_data[] = {
        /* columns rows colors chars-per-pixel */
        "32 18 2 1",
        "a c Black",
        "b c #FFFFFF",
        /* pixels */
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaabaaaaaaaaaaaaaaaaaaaaaa",
        "abababbaabababbaaabaababababbaaa",
        "abababababbaabababababababababaa",
        "abababababababababababababababaa",
        "abababababababababababababababaa",
        "aabbababababababaabaaababaababaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        };
        wxBitmap bitmap( xpm_data );
        return bitmap;
    }
    return wxNullBitmap;
}


// End of generated file
